version: '3'

services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: dockerfile
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - VITE_PRODUCT_SERVICE_URL=${VITE_PRODUCT_SERVICE_URL}
      - VITE_AUTH_SERVICE_URL=${VITE_AUTH_SERVICE_URL}
      - VITE_ORDER_SERVICE_URL=${VITE_ORDER_SERVICE_URL}
    depends_on:
      - product-service
      - auth-service
      - order-service
    restart: unless-stopped
    networks:
      - ecommerce-network

  product-service:
    build: 
      context: ./services/product-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/ecommerce
      - JWT_SECRET=efrei_super_pass
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - ecommerce-network

  auth-service:
    build: 
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - MONGODB_URI=mongodb://mongodb:27017/ecommerce
      - JWT_SECRET=efrei_super_pass
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - ecommerce-network

  order-service:
    build: 
      context: ./services/order-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - MONGODB_URI=mongodb://mongodb:27017/ecommerce
      - JWT_SECRET=efrei_super_pass
      - VITE_PRODUCT_SERVICE_URL=${VITE_PRODUCT_SERVICE_URL}
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - ecommerce-network

  mongodb:
    build: 
      context: ./services/mongodb
      dockerfile: Dockerfile
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=ecommerce
    networks:
      - ecommerce-network
    restart: unless-stopped

networks:
  ecommerce-network:
    driver: bridge

volumes:
  mongodb_data:
